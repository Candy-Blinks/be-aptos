generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  username        String     @unique
  aptos_address   String     @unique
  display_name    String
  email           String?    @unique
  header_url      String?
  profile_url     String?
  bio             String?
  activity_points Int        @default(0)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  socials         Json       @default("{\"x\": \"\", \"tiktok\": \"\", \"website\": \"\", \"youtube\": \"\", \"facebook\": \"\", \"linkedin\": \"\", \"instagram\": \"\"}")
  
  // Relations
  referral_code   String     @unique @default(cuid())
  referral_count  Int        @default(0)
  referred_by     String?
  comments        Comment[]
  followers       Follower[] @relation("UserFollowers")
  following       Follower[] @relation("UserFollowing")
  likes           Like[]
  posts           Post[]
  shares          Share[]
  referrer        User?      @relation("UserReferrals", fields: [referred_by], references: [referral_code])
  referrals       User[]     @relation("UserReferrals")
}

model Post {
  id            String    @id @default(cuid())
  user_id       String
  content       String
  media_urls    Json      @default("[]")
  like_count    Int       @default(0)
  comment_count Int       @default(0)
  share_count   Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  comments      Comment[]
  likes         Like[]
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shares        Share[]
}

model Comment {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Like {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  created_at DateTime @default(now())
  
  // Relations
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Follower {
  follower_id  String
  following_id String
  created_at   DateTime @default(now())

  // Relations
  follower     User     @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
}

model Share {
  id         String   @id @default(cuid())
  post_id    String
  user_id    String
  created_at DateTime @default(now())
  
  // Relations
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Collection {
  collection_name        String
  collection_owner       String
  collection_description String
  collection_uri         String
  max_supply             Int
  number_of_mints        Int
  token_description      String
  token_name             String
  token_uri              String
  published              Boolean @default(false)

  @@id([collection_name, collection_owner])
}

model ProcessorStatus {
  processor                  String @id
  last_success_version       BigInt
  last_transaction_timestamp BigInt
  last_updated               BigInt
}
